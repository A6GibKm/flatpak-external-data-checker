#!/usr/bin/env python3
#
# flatpak-extra-data-checker: A tool for checking the status of
# the extra data in a Flatpak manifest.
#
# Copyright (C) 2018 Endless Mobile, Inc.
#
# Authors:
#       Joaquim Rocha <jrocha@endlessm.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import argparse
import logging
import sys

from lib.externaldata import ExternalData
import checker


def print_outdated_external_data(manifest_checker):
    ext_data = manifest_checker.get_outdated_external_data()
    for data in ext_data:
        if data.state == ExternalData.State.BROKEN:
            print('BROKEN: {}\n'
                  ' Unreachable URL: {}'.format(data.filename, data.current_version.url))
        if data.new_version:
            if data.state == ExternalData.State.VALID:
                print('CHANGE SOON: {}\n'
                      ' Has a new version:'.format(data.filename))
            else:
                print(' A new version is available:')

            print('  URL:    {url}\n'
                  '  SHA256: {checksum}\n'
                  '  Size:   {size}'.format(**data.new_version._asdict()))
        print('')

    return len(ext_data) > 0


def main():
    types = ['all'] + list(ExternalData.TYPES)
    parser = argparse.ArgumentParser()
    parser.add_argument('manifest', help='Flatpak manifest to check')
    parser.add_argument('-v', '--verbose', help='Print debug messages',
                        action="store_true")
    parser.add_argument("--update",
                        help="Update manifest(s) to refer to new versions of "
                             "external data",
                        action="store_true")
    parser.add_argument('--filter-type',
                        help='Only check external data of the given type',
                        choices=types, default='all')
    args = parser.parse_args()

    level = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(level=level)

    manifest_checker = checker.ManifestChecker(args.manifest)
    filter_type = ExternalData.TYPES.get(args.filter_type)

    try:
        manifest_checker.check(filter_type)
    except checker.NoManifestCheckersFound:
        sys.stderr.write('No manifest checkers were found\n')
        exit(2)

    if print_outdated_external_data(manifest_checker):
        if args.update:
            manifest_checker.update_manifests()
        exit(1)


if __name__ == "__main__":
    main()
